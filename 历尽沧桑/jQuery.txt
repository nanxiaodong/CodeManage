1.为div背景图片设置
var url="";
<div id="divImage"></div>
$("#divImage").css("backgroundImage","url("+url+")");

2.字符串截取
var str="123:abc";
var data=str.split(":");
data[1]为：abc
data[0]为：123

3.vs调试前台代码
	1）默认浏览器为IE
	2）如果IE为IE6，则需要将工具→Internet选项→高级下面的“禁用脚本调试勾去掉”；如果是IE8则不用处理
	3）将要调试的页面设为起始页
	4）按F5启动

4.IE8下浏览器调试
	1）工具→开发人员工具
	2）点击“脚本”→“启动调试”→设置个断点→刷新页面
	
5.火狐浏览器
	1）安装插件“FireBug”根据浏览器的版本不同，插件版本也不相同
	
6.表格	<table id="salary"></table>
	获得表格的行（去除第一行和最后一行）$("#salary tr:not(first):not(last)")
	
7.window.onload(function(){})与$(document).ready(function(){});都是窗体加载完成之后执行（但是$(document).ready(function(){})先执行）
	因为：window.onload()  当dom创建完成，并且图片/CSS样式/js加载完成之后才触发
		  $(document).ready()  dom创建完成就触发
   onload只能注册一次，ready可以注册多次
   
   jQuery实现window.onload()=>$(window).load(function(){});
   
8.  dom对象  var div=document.getElementById("dv");
	把dom对象编程jQuery对象  var  div=$(div);  这样就可以将dom对象编程jQuery对象了
	
	
	jQuery对象 var div=$('#dv');
	将jQuery对象变为dom对象：var div =div[0];或 var div=div.get(0);
	
9.声明一个数组：var arr=[12,23,22,3];

10. 在each中，return false  相当于break  跳出循环
			  return  true  相当于continue  继续执行

11.样式操作
	获取样式：attr("class")
	设置样式：attr("class","myClass")//会覆盖原来的样式
	追加样式：addClass("myClass")(不影响其他样式)
	移除样式：removeClass("myClass")
	切换样式：toggleClass("myClass")【开灯关灯】如果存在样式，则去掉样式；如果没有样式则添加样式
	判断是否存在样式：hasClass("myClass")
	
12.text是给两个标签之间进行赋值  如：<a>123</a>

13.$("input:checked")获得所有选中的元素(Radio、CheckBox)
   $("select:selected")选取所有选中的元素【下拉框】
   
   $(":input")选取所有的<input>、<textArea>、<select>和<button>元素
   $("input")只获得<input>
   
14.添加元素
	
	
15.select标签可以多选   multiple="multiple"

16.合成事件：hover(enterfn,leavefn),当鼠标放到元素上时，调用enterfn方法;当鼠标离开元素的时候调用leavefn方法
			 toggle(fn1,fn2);   点击元素时，第一次触发fn1方法，第二次触发fn2方法【可以注册多个方法】
			 
			 
17.透明度属性：opacity


18.泛型语法：public interface IBaseDAL<T> where T:class,new()约束T必须是一个class，另外必须有默认的构造函数
			 {
			 }
19.mvc3中前台@相当于<%:%>
	     服务器端注释@**@
		 客户端注释<!---->

20.扩展方法三要素：静态类
				   静态方法
				   this关键字
21.路由规则
	mvc路由规则匹配测试

22.第八个事件创建请求的页面类对象或一般处理程序

23.declare @temp TABLE (ID INT,name varchar(20))

24.使用区域功能时，而区域里面含有多个相同名字的控制器，在global里面配置路由时，可以添加命名空间的约束
   new string["控制器所在的命名空间"]
   
25.网站发布   项目生成的时候，可以指定生成的目录路径
			  生成之后可以调用Dos命令
2013-12-27  
 1.网站发布
 2.项目生成可以修改路径（默认为debug\bin下）
 3.生成前后可以调用dos命令
 4.重新生成项目时，改变生成exe文件的图标（只能选择是ico文件）
 
2013-12-28
	win7系统没有iis服务，如何启动？
	控制面板->程序和功能->打开或关闭windows功能-Internet信息服务
	
	过滤器
	在model里面自定义一个类，继承自ActionFilterAtterbute，在自定义的类型实现集成类的方法
		1)OnActionExecuting
		2)OnActionExecuted
		3)OnResultExecuting
		4)OnResultExecuted
	可以注册一个全局的过滤器（权限校验）【所有Action执行前或者所有试图在渲染之前之后执行的公共代码】
	标签打在控制器上面会总用到这个控制器中所有action上面
	如果在action也打了标签，以离action最近的标签会起总用（默认情况下）
	
	注册：Register
	模板页

2013-12-29
	1.附加到进程调试
		如果从bin下运行exe文件，在程序中选择，附加到进程，选中运行的exe程序的进程，可以进行调试
	2.library：库、程序库、图书馆
	3.mvc调试
		mvc3源码->System.Web.Mvc生成，可以找到生成的程序集中，拷贝到新建mvc项目中（将原来的引用移除，添加程序集的引用）
		
	4.项目：敏捷开发
		项目之间不能直接依赖，如：DAL直接引用Model层项目，当Model出现错误时，DAL就编译不过去
			                 添加程序集的引用  DAL引用Model的程序集，而不是Model的项目
			 在项目中创建一个文件夹Library，将Model层的生成更改为Library下，DAL可以直接引用Library下Model生成的dll程序集
2013-12-30
-----------------------------------------------2014-01-01-------------------------------------------------------------------
2014-01-01
	单元测试：写好的方法，没有界面如何测试。
			  让要测试的方法获得光标，右键“创建单元测试”，选中要测试的方法名称，【确定】输入新建项目的名称
    数据访问层→数据访问驱动层→database
	单元工作模式：Unintwork  将一系列的操作一次性提交回数据库

2014-01-02
	winform中combox控件，如何获得选中的值？(drp.selectItem as lisrItem).valueMember;
	项目生成顺序：解决方案→右键→项目生成顺序→依赖项→调整生成顺序
	EF上下文怎么保证线程内唯一？通过工厂  CallContext
	抽象方法必须在抽象类中
2014-01-03
	1.并发量很大时，数据库顶不住，怎么解决？
	    启动一个分布式缓存（队列），将所有的sql脚本都放到队列里面去，再启用另外一个线程（工作进程），
	每时每刻从队列里面去取sql脚本，批量的提交到数据库，减少跟数据库交互的次数，提高了数据库的吞吐率，
2014-01-04
	1.获取数据库中的所有表名：exec sp_tables （类型有table的和试图的）
	获取一个表中的所有列名：exec sp_columns ‘表名’
	2.zip后缀的压缩包是windows操作系统可以识别的压缩包，没有压缩软件也可以进行解压
	3.用户表和角色表，什么时间可以直接设置俩表进行多对多关联，什么时间通过中间表（用户角色表）进行关联？
	 当用户角色表中存在除用户表ID和角色表ID的字段时，使用中间表进行用户表和角色表进行关联，如果不存在的话，
	 可以直接将用户表和角色表进行关联
	4.根据模型生成数据库   生成sql脚本后，单击右键执行sql脚本
	5.要引用model实体对象的ObjectContext上下文，需要引入System.Data.Entity
2014-01-05
	1.页面前台两个@@符号相当于一个@，若要显示@，则需输入@@
	2.内边距：padding 两个元素是嵌套关系   外边距：margin  两个元素是同级关系
	 div独占一行，如果该行有一个元素时，div就自动换行放到下一行
2014-01-06
	<input type="checkBox" id="ck"><label for="ck">这是选择框</label>
	获得label:$("label")
	获得checkbook通过type:$(":checkBox")
	
	$(function(){});之外的方法，在内部调用时，如果带()就直接执行了，如果不带()当点击的时候才执行
2014-01-07
	1.获得id为tab的table中的所有行（去除第一行和最后一行）
	 $("#tab tr:not(:first):not(:last)")
	2.mvc项目中的web.config中需要将Model中app.config文件的connectionstring节点拷贝到web.config中
	3.
2014-01-10
	1.js的substring后面的s是【小写】
2014-01-16
	数据库读写分离，死锁概率就大大降低了（尽量保证操作的顺序一致，也可以减少死锁）
	s:共享锁,大家都是读的时候，都可以直接读
	x:排他锁，只有当当前表没有锁的时候，才能加上x锁【独享】
2014-01-17
	sqlServer  在一个事物中操作一个表，如果这个事物没有提交或回滚【这个表有个一个X锁】，这时对操作的表选择编辑前200行时，
			   将不会出数据，在事物提交或回滚后，可以编辑前200行数据
2014-01-21
	打开服务命令：services.msc
	开始数据库服务：net start mssqlserver
	停止数据库服务: net pause mssqlserver
	重启数据库服务：net continue mssqlserver
	停止数据库服务：net stop mssqlserver
	打开注册表:regedit
	打开记事本：notepad
	打开excel：excel
	打开word：winword
	关闭代理服务sqlserver代理（sqlexperess）：sql跟踪时，经常出现一大坨东西
	
2014-01-02
	所有页面初始化时，都先执行_ViewStart.cshtml页面
	1.给用户设置角色
	2.将权限加到权限组里面去
	3.将权限组加到角色里面去
	
2104-01-26
	在线笔记：“麦库”，【大象笔记】
	验证码类Bitmap需要添加引用：“System.Drawing”
			HttpContext需要添加应用：“System.Web”

2014-03-22
	重定向：Response.Redirect(”要跳转的路径“);

2014-03-23
	HttpHandler实现图片上传
	浏览器端：表单元素使用文件选择框<input type="file" name="t">控件
			  表单设置enctype=“multipart/form-data”
				  <form method="post" action="" enctype=“multipart/form-data”>
					  请选择文件：<input type="file" multiple="true">   multiple="true" 可以选择多个文件
					  <input type="submit" value="提交">
				  </form>
	服务器段：服务器端接收客户端上传的文件使用Request.Files属性
			  使用HttpPostFile的SaveAs方法将图片保存在服务器
			  //获得提交的文件
			  HttpPostedFile file=context.Request.Files[0];//表单里面可能提交多个文件
			  //保存提交的文件（使用绝对路径）
			  file.SaveAs(context.Server.MapPath("~文件夹路径\\"+file.FileName));   ~代表asp.net的网站根目录
	  
    大量图片处理：url地址请求：Guid+.Jpeg  请求Handler  在图片表中查询（Guid相当于图片表中的ID），看看图片在哪个服务器上放着，
				  再去对应的服务器查询，拼接出完整的路径 192.168.1.1/D/a/a.jpeg  并返回
				  
				  图片表：ID ServerID  Path
				          1  服务ID    /a/a.jpeg
				  图片服务器表：ID	ServerIP	Status  Path
							    1号  192.168.1.1   未满   D:/
				
				请求过来的时候，客户端发送过来的是图片的信息的ID，后台handler拿到ID之后，从图片信息表里面拿到我们的当前图片
				存在哪个服务器上，再到图片服务器信息表里面去拿具体的服务器IP地址和具体路径，然后拼接成最终的图片的地址。
			  
	webForm 页面指令（最上面的一行）可以指定前台进程自后台
		    前台页面继承后台cs（前台页面也会编译成一个类）
			前台页面（aspx）继承自aspx.cs(后台)继承自Page类继承自IHttpHandler：ProcessRequest方法
			一般处理程序继承自IHttpHandler：ProcessRequest方法
			page是一个复杂的一般处理程序
	获取当前页面生成的程序集：System.Reflection.Assembly.GetExecutingAssembly().Location		
	
	webForm:查询页面生命周期：将编译好的dll文件添加到reflect中
			1.找到对应的页面：查询_BuildControlTree()方法
			
	IsPostBack原理：第一次请求为true，以后请求为false
					在页面上添加一个隐藏域，第一次请求这个页面时，获取不到页面中隐藏域的值，以后再
					请求这个页面时就能后获得页面上隐藏域的值
	ViewState原理：
	禁用viewState：在页面aspx中的page指令：EnableViewState=“false”
	
	客户端注释：<!--这是客户端注释-->  能够在客户端看到（在页面上右键查看源代码）
				尽量减少客户端注释，因为这些字节会发送给客户端，会占用服务器端的带宽
	服务器段注释：<%--这是服务器段注释--%>  在客户端看不到（在页面上右键查看源代码）
	
	url不区分大小写
	
2014-03-29
		HttpContext上下文对象是线程内唯一
		Global文件中的Application_Start()方法只执行一次，只处理静态的数据（应用程序启动的时候调动一次）
	防盗链  放下载盗链、放图片盗链可以伪造（比如迅雷）
		Request.UrlReferrer 请求的来源（获得客户端上次请求的URL地址）
		Request.Url  获得当前请求地址
		Request.UserHostAddress获得访问者的IP地址
		比较上次请求的url和当前请求的url，端口号是否相同
		动态实现防伪造：http:localhost:8080/a.aspx?imageID=动态的ID
					    根据缓存临时key（动态的ID）去缓存中找对应的图片ID
						有一张表  ID  	文件路径  文件格式   
						设定多长时间缓存过期
		
		Response.ContentType  输出流的内容类型，
							  比如：是html(text/html),普通文本(text/plain),JPEG图片(image/jpeg)
		
		Response.End()中止响应
		
	跨站脚本攻击：
			aspx页面后台：public string name="<script>alert('123')</script>";
			aspx前台页面：<%=name%>  这时将弹出一个alert显示123  
			这样页面容易被劫持（当是一个链接时，将会执行脚本跳转到广告页面）
			
			使用：<%:name%> 这时显示：<script>alert('123')</script> 
			
			也可是在后台：name=HttpUtility.HtmlEncode("<script>alert('123')</script>");
			前台<%=name%> 这时显示<script>alert('123')</script> 
			
			:冒号  会自动编码化当前的文本
			=只是原封不动的输出文本，而文本可能是js或者html代码，很可能造成xss攻击，页面可能被劫持
			
			前台页面
			<%Response.Write(HttpUtility.HtmlEncode("<input type='text'>"))%>
			输出：<input type='text'>  【因为编码了】
	
	使用iframe不利于seo优化
		使用Server.Execute("a.aspx");将一个页面在一个页面中展示（效果跟iframe差不多，但比iframe有利于seo优化）
		<%Server.Execute("a.aspx");%>在前台页面执行a.aspx页面
		
	server.MapPath()；获取文件的物理路径
	server.Transfer()	执行另一个页面，结束本次页面的执行 Execute()  end()
	server.Execute()	执行另一个页面，执行完成后返回本页面
	
jquery中的confirm使用
	if(confirm("你确定么？"))
	{
		
	}
	
前台页面：AutoEventWireup="false"	后台cs中：Page_*****事件都不执行

页面跟踪：前台页面加：Trace="true”  命令
	
	exec (@sql)--执行动态的sql脚本的时候，一定加上括号（不加就以为执行的是存储过程）
	
	进程外session：可以在IIS或ASP.NET服务以外关闭时继续保持状态，注意此时存储到session中的对象必须支持序列化
	1.开启ASP.NET状态服务：cmd里面命令：services.msc
	2.配置webconfig
		<sessionState mode="StateServer" stateConnectionString="tcpip=localhost:42424">【IP地址：端口号】
		</sessionState>	
	3.如果是远程的stateserver配置注册表
		命令：cmd → regedit.exe	HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\aspnet_state\Parameters\AllowRemoteConnection
			设置成1
	SQLServer
		aspnet_regsql.exe -S 127.0.0.1 -U sa -P 123 -ssadd -sstype c -d SessionTest
		1. <sessionState mode="SQLServer" allowCustomSqlDatabase="true" sqlConnectionString="Data Source=.;Initial Catalog=SessionTest;uid=sa;pwd=123"></sessionState>
		2.对象必须可序列化
		
		
缓存：  
	要实现页面输出缓存，只要将一条 OutputCache 指令添加到页面即可： 
	＜%@ OutputCache Duration="60" VaryByParam="*" %＞ 
	Duration：必需属性。页面应该被缓存的时间，以秒为单位。必须是正整数。
	VaryByParam：必需属性。Request 中变量的名称，这些变量名应该产生单独的缓存条目。"none" 表示没有变动。"*" 可用于为每个不同的变量数组创建新的缓存条目。变量之间用 ";" 进行分隔。
	
	
 一个请求过来， 一个进程进行处理，公用一个请求上下文，所以工用一个response对象
 在一个页面后台跳转到另一个页面时，之前写在输出流中的内容还是会输出
	Response.Write("shit来了");
	Server.Transfer("a.aspx");
	结果为：shit来了   a.aspx页面的内容
	
2014-04-18
	页面引入js或css文件:
	全路径的方式：<script src="@url.Content("~/Scripts/jquery-1.5.min.js")" type="text/javascript"></script>
		这种方式是没有js智能提示的
	mvc2.0和mvc3.0的校验方式有区别（前端校验）
	mvc3.0为隐式校验，mvc2.0为显示校验
	mvc3.0会在生成的html标签上加上属性，而mvc2.0则会生成一段js代码
	mvc2.0需要在提交的表单前面加上@{Html.EnableClientvalidation();},
	mvc3在webconfig中有个<appSettings>
							<add key="ClientvalidationEnabled" value="true">	
						  </appSettings>
						  属性就不用在表单前面加@{Html.EnableClientvalidation();}了
	
	
	//给BranchValidate类加标签，可以在Branch类中使用
	[MetadataType(typeof(BranchValidate))]//告诉编译器：此Branch类共享BranchValidate类的元数据信息
	public partial Branch
	{
	}
	pubblic class	BranchValidate
	{
		[Required(ErrorMessage="这是来自伙伴类的错误信息")]
		public string BranchName{set;get;}
	}
	如果以Branch为强类型创建对象，也会访问到BranchValidate的验证信息
	
2014-04-20
	mvc控制器想view传值方式:ViewData["key"]="value";
	                        TempData["key"]="value";
							ViewBag.aa="value";//aa可以随便定义，页面调用方式：<%:ViewBag.aa%>
							
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
 
 