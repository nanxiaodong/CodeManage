1.在winform中通过一个窗体按钮调用其他按钮时，如果使用ShouDialog()在关闭子窗体之前，主窗体是不能进行操作的，因为这时是跑的同一个线程
  如果在点击按钮调出其他窗体时，通过线程池进行的操作需要使用ShowDialog()【这时好像不能用Show(),程序无反应】这时在关闭子窗体之前是可以操作主窗体的，因为这时不是同一个线程
2.string.IsNullOrEmpty(value);//value参数为null或空字符串("")，则为true;否则为false
3.as：当通过as进行类型转换时，如果转换失败不报错，只是返回null
4.byte[]拷贝（BlockCopy块拷贝）
    byte[] data = Encoding.Default.GetBytes(txt);
	byte[] addSingleData = new byte[data.Length + 1];
	addSingleData[0] = 3;
	//从data中拷贝
	//拷贝的起始位置：0(data的0位置)
	//拷贝到addSingleData数组中
	//从1开始向addSingleData中拷贝(addSingleData数组的第1个位置【索引从0开始】)
	//拷贝data.Length个长度
	Buffer.BlockCopy(data, 0, addSingleData, 1, data.Length);//向addSingleData数组中的第一个位置开始添加数据，拷贝data中的数据，从0开始拷贝，
															 //拷贝的长度为data.Length个长度
5.为什么要有tcp协议
	就相当于为什么要有汉语一样
	浏览器其实也是socket客户端，发送消息到服务器端
	浏览器只负责解释执行html+css+javascript代码
	服务器可执行服务器端语言：.NET、JAVA...分别有不同的运行环境执行(Framework,JVM)
6.浏览器：执行在客户电脑上的socket客户端
ASP.NET
7.HTTP协议响应码
  200段是成功；300段需要请求做进一步的处理；400段表示客户端请求错误；500段是服务器的错误
  “200”:OK
  “302”：Found重定向
  “400”：错误请求，发出错误的不符合Http协议的请求
  “403”：禁止访问(没有权限)
  “404”：未找到，请求页面不存在
  “500”：服务器内部错误
  “503”：一般是访问人数较多
8.http是无状态的
  http是“请求-响应”的工作方式
9. asp与asp.net区别
   asp直接在页面写程序，asp.net中页面与代码进行了分离(code_behind)
10. get请求
	1.通过超链接,点开的新的页面→也是get请求
	2.http://www.baidu.com/handler.aspx?name=admin&pwd=admin→get请求
	3.<body>
		<form action="ProcessFrm.ashx" method="get">
	  </body>
	QueryString：在url地址后面紧跟?，然后通过key=value形式传递数据，多个数据用&符号隔开
	4.response.Redirect();302重定向，从新请求
	post请求(只有这一种post请求方式)
	<body>//action指向一个后台的动态页面地址，表示当前表单的内容提交到这个地址进行后台处理
		<form action="ProcessFrm.ashx" method="get">
		<input type="submit" value="提交表单"/>//表单类型的标签：<input/>、<select></select>、<textarea></textarea>
	  </body>
11.get请求缺点
	1.数据显示在地址栏中(用户名密码直接放在url地址栏中，不安全)
	2.地址栏中传输数据有限制，IEurl地址栏中传输数据2KB
12. 表单提交数据：input、textarea、select可以提交到后台，必须有name属性才会提交，而且提交数据的时候以name为key，
	以value属性为值置;如果这个标签是disable的那么也不会提交到后台	
13. GAC全局程序集缓存
14. 将网站文件的相对路径转换成操作系统的绝对路径
    方式一：string path=context.Request.MapPath("Login.html");
	方式二：string path=context.Server.MapPath("Login.html");
15. 重定向   能够传递的数据以2KB为限 
    Response.Redirect("http://www.baidu.com");    传递的数据超过2KB时，务必使用Server.Transfer。 
16. http协议上传限制最大4M
17. 关于图片存在不同的服务器上怎么访问
	【有一张Image表包括 ID  ServerId  Path】	请求过来的时候，客户端发送过来的是图片的信息的id，后台handler拿到id之后，从图片信息表里面拿到我们的
	当前图片存在哪个服务器上，再到图片服务器信息表里面去拿到具体的服务器ip地址和具体路径，然后拼接成最终的图片的地址
18. 数据库读写分离(数据库集群)
	在一个数据库里门专门读取数据(从库)，里一个数据库专门写数据(主库)
19. webForm：前台页面aspx类  继承   aspx.cs  code-behind   继承  Page  继承  IHttpHandler：ProcessRequest
			 Page本身就是一个复杂的一般处理程序
	code-behind:前台页面展示数据，后台代码存放(访问数据库、访问业务逻辑层);实现了html与后台的分离
20. 服务端的C#代码是定义在aspx.cs中。aspx控制页面长相，cs控制程序逻辑，这种“aspx后cs”的方式就被称为CodeBehind(代码后置)
21. cs中的Page_Load事件，在所有的控件事件之前执行(页面的ProcessRequest方法执行之前，先执行cs中的Page_Load方法)
22. get请求IsPostBack为false，post请求IsPostBack为true
23. 客户端注释与服务端注释
	<--这种方式是客户端注释-->在页面查看源代码时可以看到该注释
	<%--这种方式是服务端注释--%>在页面查看源代码时不能看到该注释
	尽量少使用客户端注释，因为这个字节会发送给客户端，会占用服务器的带宽 
24. 页面生命周期
	所有的aspx都继承的基类：page
25. 响应的缓存输出：为了提高服务的性能，ASP.NET想浏览器write的时候默认并不是write一次都会立即输出到浏览器
    而是会缓存数据，到合适的时机或者响应结束才会将缓冲区中的数据一起发送到浏览器    
	 Response.Buffer、Response.BufferOutPut两个属性是一样的，Buffer内部就是调用BufferOutPut，这个属性是控制是否采用响应缓存，默认为true
	 Response.Flush()将缓存区中的数据发送给浏览器
	 Response.Clear()清空缓存区中的数据，这样在缓存区中的没有发送到浏览器的数据被清空，不会被发送到浏览器
	 Response.ContentType输出流的内容类型
	 Response.OutputStream输出流，在输出图片、Excel文件等非文本内容的时候要使用它
	 Respons.End()终止响应，将之前缓存中的数据发送给浏览器，End()之后的代码不会被继续执行，End方法里调用了Flush()方法 
26. Name为aspx的一个字段  public string Name = "<script>alert('科比')</script>";
    <p>名字为：<%:Name %></p> //名字为：<script>alert('科比')</script>
    <p>名字为：<%=Name %></p>   //弹出框‘科比’
	:冒号→会自动编码化当前的文本
	=等号→只是原封不动的输出文本，而文本可能是js或者html代码，很可能造成xss攻击，页面可能被劫持
	<%Response.Write(HttpUtility.HtmlEncode("<input type='text' />")); %>//结果为：<input type='text' />
    <%Response.Write(HttpUtility.HtmlDecode("<input type='button'/>")); %>//结果：显示一个按钮
27. <form id="form1" runat="server"></form>//只有设置了runat="server"，只有
											 这种状态的表单提交的时候，后台才会自动的设置isPostback属性
28. Server.Transfer(path);在服务器内部重定向(不能重定向到外部网站),浏览器意识不到这
						  个重定向(不能内部重定向到aspx，否则会报错“执行子请求出错”)
	Server.Transfer只能指定向一个aspx页面(只能切换到同目录或者子目录的网页)
	Response.Redirect;通知浏览器，重新访问url这个网址，可以重定向到外部网站
29. http协议无状态的根本原因是：浏览器和服务器使用Socket通信，服务器将请求结果返回给浏览器后，会关闭
当前Socket连接。而且服务器会在处理页面
								完毕后销毁页面对象。
	对网站造成的影响：如果用户输入了一些信息，当跳转到下一个页面时，数据丢失，再也不能获得那些数据。
30. ViewState
	适用场景：同一个页面在不关闭的情况下多次与服务器交互
	viewState本身就是通过隐藏域实现的（页面后台记录一个值，需要在再此请求时使用，但是后台不能保存该值，只能将值返回给前台，存在隐藏域中，在之后的请求中获得隐藏域的值【本质就是通过前台中转一下】）
	非表单控件，不能把数据提交到后台，只能通过ViewState (表单类型的标签：<input/>、<select></select>、<textarea></textarea>可以直接提交到后台)
	禁用整个页面的ViewState
    <%@ Page Language="VB" AutoEventWireup="false" CodeFile="ViewState.aspx.vb" Inherits="_06_ViewState" EnableViewState="false" %>
	WebForm的IsPostBack依赖于__ViewState
	EnableViewState="false"加在某个控件上时，将禁用该控件的viewState
	1. 用户存储数据的方式:
		ViewState["myKey"]="myData";
	   读取数据方式:
		string myData;
		if(ViewState["myKey"]!=null)
		{
			myData=(string)ViewState["myKey"];
		}
	  注意：ViewState不能存储所有数据类型，仅支持可序列化对象
			非单值服务器控件的状态也自动保存到ViewState中(文本框是单值控件，所以不会保存到ViewState中)
	2. 使用ViewState前提：页面是必须有一个服务器端窗体标记(<form runat="server">)
31. Cookie
	浏览器发送请求时，会在请求报文的请求头部，把浏览器所在机器内存或硬盘中的请求网站自己的cookie进行封装，发送给服务器【可以区分客户端，主要应用就是“记住我”功能】
	cookie是在服务器端创建的，通过响应报文发给客户端，浏览器解析响应报文，将cookie存在浏览器所在机器的内存中或硬盘上
	1. Cookie是一种能够让网站服务器把少量数据(4kb左右)存储到客户端的硬盘或内存，并且读取出来的技术
	在请求网页时，在请求报文的请求头部会将cookie发送给服务器端，服务器端就可以通过Request.Cookie获取客户端发送过来的Cookie信息 （请求时将该域下的cookie封装到请求报文中）
	在服务器端不能清空浏览器的Cookie
	在服务器删除cookie，在后台获得请求的所有cookie，for循环所有的cookie，从新创建新的cookie，名字与原来的cookie名称相同，设置过期时间
	//获取客户端cookie的个数
	int cookieCount=this.Request.Cookies.Count;
	//从客户端获得请求的cookie
	for(int i =0;i<cookieCount;i++)
	{
		//创建一个新的cookie，只不过名称跟请求来的一样
		HttpCookie cookie=new HttpCookie(Request.Cookies[i].Name);
		//在服务器端不能直接清空浏览器的cookie
		cookie.Expires=DateTime.Now.AddHours(-1);
		Response.Cookies.Add(cookie);
	}
	创建Cookie如果设置过期时间，就将创建的Cookie写在硬盘上;如果没有设置Cookie的过期时间，就将创建的Cookie写在客户端浏览器所在机器内存中
	
	主域的cookie是能被所有的子域访问到的，而子域想让主域访问到自己自己写在客户端的cookie，则需要
	将Domain属性设置为主域（其他子域也可以访问）
	
	在子网站添加的cookie，在请求主网站时，会将子网站的cookie一块发送回去
	//例如：tieba.baidu.com 中的 cookie.Domain设置为"www.baidu.com"，那么访问www.baidu.com时，也可以访问
																	 tieba.baidu.com的cookie信息
	cookie.Domain="www.baidu.com";//把子网站的cookie.Domain设置成主网站的，这样主网站也可以访问子域的cookie
	
	如果想让子域的cookie让主域也能访问，则设置如下：cookie.secure=false;  false时不校验
	不设置过期时间，cookie就会存在浏览器所在机器的内存中（浏览器一关闭，进程一挂掉，cookie就没了），其实就是浏览器的进程里面，
	设置了过期时间cookie就会存在浏览器所在机器的硬盘上
	
	cookie在磁盘中存在的位置：C盘/用户→组织→文件夹和搜索选项→查看  
	C:\Users\Administrator\Cookies
	
	如果服务器两次输出同一个名称的Cookie，第二个覆盖第一个
	//设置cookie的路径(当前这个cookie只能给Cookie文件夹下的页面使用,其他文件夹下的页面获取不到)
	cookie.Path=“/shop/Cookie”;
	
	禁用cookie：在webconfig中配置节点：
		<system.web>
			//过期时间10分钟（单位是分钟），cookieless不使用cookie来传递sessionID
			<sessionState cookieless="true" timeout="10">//不指定过期时间，默认为20分钟
			</sessionState>
	    </system.web>
	
	cookie的缺点：每次请求都会将cookie带着，哪怕请求一个图片也将cookie带着（都是请求网站域下的cookie）
	解决：3台服务器
		  1）主域的服务器
		  2）IIS 子域名  存放aspx
		  3)IIS  子域名  存放image、css、js等静态文件
		  这时请求静态文件时，就不会带着该服务器域名下的cookie了
	
32. Session
	开发场景：常用于保存登录用户ID
	Session提供了把信息保存在服务器内存中的一种方式，它能存储任何数据类型包括自定义对象
	每个客户端的Session数独立存储的
	在整个用户会话过程都会保留此信息
	当用户在应用程序中从一个页面浏览到另一个页面时，存储在Session对象中的变量不会丢失
	每个用户请求服务器都会带着sessionID，在服务中根据带着的sessionID，返回对应的session值
	sessionID存在客户端
	sessionID是通过cookie传递到服务器，sessionID是一个没有过期时间的cookie值，浏览器一关闭sessionID就消失了，服务器端也存着这个sessionID【key】默认过期时间为20分钟，20分钟没有登录后台，session也会过期 （如果后台不存sessionID，每次请求都会创建新的session）
	
	session的过期是滑动窗口机制，例如0分钟发出请求分配一个sessionID，过期时间为20分钟，再第2分钟时再发出一次请求，
	已经分配的sessionID过期时间将变为22分钟
	session池，对象池跟application很像，session过期之后session对象不销毁，将session再放回池子里去，下次有人再访问时，就分配新的sessionID和session对象【跟商场里面存储包裹里面的箱子一样】即服务器端session是可以重用的
	
	查询sessionID：Session.SessionID
	如果禁用了cookie，发送请求时将会通过url地址传递sessionID
	
	1. Session操作
	  开始并为Session赋值：Session["userName"]="admin";
	  取值：string name=Session["userName"].ToString();
	  销毁(取消/退出):Session.Abandon();//销毁服务器端的Session对象
					  Session.Clear();//清空服务端的Session对象里的键值对，Session对象并没有从Session池中销毁
33. 一般处理程序操作Session
	一般处理程序要实现IRequiressessionState接口，这个接口只是个标记，标记一下当前的handler可以进行Session操作;
			如果不实现该接口，只能读取Session的值(用一般处理程序做验证码时，需要将验证码信息存储到Session中)
34. 对winform、webform应用程序都要有自己写的基类
	例如对webform的登录Session是否为空，为空则跳转到指定页面的方法校验可以写在基类里面让其他的页面继承基类
35. 在webconfig中禁用了cookie来传递sessionId可以通过url的方式传递sessionid
	如果是浏览器把cookie禁用了，这个时候session每次都是新建的
36. Application(放在服务器端)
	Application：第一个用户访问站点时，应用程序启动，并创建一个Application对象
	application对象可以存储应用程序级别的数据
	创建成功后，这个应用程序中都可以是用该对象，除非应用程序关闭，否则对象一直存储在内存中
	
	//因为全部用户都可以访问application实例，所以要锁住给application赋值，之后再解锁
	在Global文件中：
		void Application_Start(object sender,EventArgs e)
		{
			//在应用程序启动时运行的代码
			Application.Local();
			Application["online"]=0;
			Application.UnLock();
		}
		void Session_Start(object sender,EventArgs e)
		{
			Application.Local();
			Application["online"]=int.parse(Application["online"].ToString())+1;
			Application.UnLock();
		}
		void Session_End(object sender,EventArgs e)
		{
			Application.Local();
			Application["online"]=Math.Max( int.parse(Application["online"].ToString())-1,0);
			Application.UnLock();
		}
	
37. dal层向bll传送数据时，不要传送datatable、dataset这种弱类型，应该为list等
38. if (XMLHttpRequest)创建Ajax的XMLHttpRequest对象的意思是：判断该浏览器支不支持该对象
39。 异步对象readyState属性
	  readyState属性指出了XMLHttpRequest对象在发送/接收数据所处的几个状态。
	  0：未初始化。new完后
	  1：已打开。对象已创建并初始化，但还未调用send方法
	  2：已发送。一调用send方法，但该对象正在等待状态码和头的返回
	  3：正在接收。已经接收了部分数据，但是还不能使用该对象的属性和方法，因为状态和响应头不完整
	  4.已加载。所有数据接收完毕
40. Ajax
	回调函数：xhr.onreadystatechange=function(){
					if(xhr.readyState==4){//请求状态
						if(xhr.status==200){//服务器返回状态码
							var msg=xhr.responseText;//服务器返回的字符串
						}else{
							alert("服务器错误");
						}
					}
		   	  }
41. XMLHttpRequest常用方法
	abort：取消请求
	open：需要使用多个参数，第一个设置方法属性(Get/Post)，第二个设置目标URL(向哪个页面请求)，第三个指定是同步(false)还是异步(true)发送请求
	send：发送请求到服务器
	setRequestHeader：添加自定义HTTP头到请求
	getAllResponseHeaders：获取HTTP响应头的整个列表
	getResponseHeader：仅获取指定的HTTP响应头
42. 对于上传图片有个转圈的效果？
	页面上就有个img标签(存放转圈图片)，刚开始把他隐藏掉，异步上传的时候让该标签显示出来，成功之后在隐藏
43. 对于aspx页面(最上部的AutoEventWireup="true")
	 AutoEventWireup="true" 表名后台.cs文件的Page_Load中的事件会自动执行
	 AutoEventWireup="false" 表名后台.cs文件的Page_Load中的事件就不执行了
 44. 第9个事件为页面加载Session(当前请求Session)，对session进行处理的话，必须是第9个事件之后
 45. 在页面最上面添加Trace="true"，可以进行页面跟踪
 46. 一般处理程序与aspx其实是一样的
	public class jQuery_Ajax : IHttpHandler 
	//面向接口编程
	//第7-8事件的创建IHttpHandler的实例：一般处理程序给接口，也可以把page类给他
	//第11-12事件之间执行IHttpHandler的实例的PR方法
47. css的流式布局
	例如span在整个页面宽度之后，如果最后一个span与页面最后面还有点空隙但是已经放不下一个完整的span了，就会将这个span放在下一行的开始
	<style type="text/css">
	div{broder-color:red} //给所有的div进行样式控制
	#head{width:100%}//对id为header的标签进行样式控制
	</style>
	<div id="header"></div>
	<div id="leftBar"></div>
	<div id="footer"></div>
48. ASP.Net服务端控件是ASP.Net对HTML的封装
	对于服务器端控件最终也会生成html标签(浏览器只识别html标签)
	<asp:Button ID="Button1" runat="server" Text="Button" />//服务器控件
	<input type="button">//html标签
	获取服务器控件最终生成html控件的id：<%=Button1.ClientID%>
	因为在引用模板页或其他容器时，服务端控件在生成html控件时id会变化，可以通过ClientID获得生成html控件时的id
	在4.0之后，ClientIDMode="Static" 可以获取生成html控件的id就是服务器控件的id
		<asp:Button ID="Button1" runat="server" ClientIDMode="Static" Text="Button" />//如果放在模板页下可能也出问题
49. 相当于for → AssociatedControlID="Button1"
	 <asp:Label ID="Label1" runat="server" Text="Label"  AssociatedControlID="Button1"></asp:Label>
	 <asp:Button ID="Button1" runat="server" Text="Button" />点击label时，就相当于点击按钮
50. RadioButton控件，对应input(type=radio),通过GroupName属性进行分组
	LinkButton样式为超链接  
	不要用LinkButton来实现普通的超链接，因为LinkButton的href为一段javascript代码，进行的是表单的Post，无法“在新窗口中打开连接”
	FileUpload控件，文件上传控件。渲染成input(type=file)。
51. <input type="text" value="客户端控件"/>//不执行C#代码，直接发送给客户端
	<input type="text" value="运行在服务器端的客户端控件" runat=“server”/>//后台还要处理一下
	<asp:TextBox ID="TextBox1" runat="server"></asp:TextBox>//最占用，还要把占位符换成input标签
52. 临时表，存放在系统的数据库里面，不是放在当前数据库里面
	性能提高：释放了原始表的S锁，提高了原始表的操作性能
	表名前加个#表示是临时表
53. Repeater一般只用来展示数据(本质就是一个for循环)
	<%#Eval("Name")%>表示在这个位置显示当前实体对象的Name属性，注意调用Eval、Bind这些数据绑定方法的时候要用#。
	可以在模板中放置Button控件（Button、LinkButton、ImageButton），模板中的按钮一般不写OnClick事件响应，而是响应Repeater的ItemCommand事件
54. ListView
	ItemTemplate里面一般也没必要用<asp:Label展示只读数据，所以直接输出<%# Eval("Name") %>
	EditItemTemplate、InsertItemTemplate中控件的绑定表达式为Text='<%# Bind("Age")
	因为Eval只是计算表达式的值输出，而Bind不仅可以计算表达式的值输出，还可以将用户填入的值更新到数据中，因此Eval是单向绑定，Bind是双向绑定。
	设置删除或修改需要的主键：DataKeyNames=“ID”;
55. 模板页
	Page_Load事件的执行顺序：先执行子页面，后执行模板页
	模板页的Load是在子页面的Load之后：请求页面的Load最先执行，然后递归执行页面下面的所有的控件的Load事件，模板页也是子页面的一个控件而已，
									  所以模板页的Load事件是在子页面的Load之后执行
    模板页一个Form，子页面一个Form  这样是不行的表单不能嵌套 只能有一个ruant=“server”   服务器控件只能放在ruant=“server” 表单中
56. 在哪里可以使用代码指定模板页(页面生命周期里面)
	public void Page_PreInit(object sender,EventArgs e)
	{
		this.MasterPageFile="模板页名称(注意路径)";//可以在这里手动指定模板页
	}
57. 缓存
	是一种用空间换取时间的技术，存储位置：CPU二级缓存、内存、windows文件读取缓存
	缓存存在失效的问题：为了保证从缓存中读取数据和慢速数据（数据库）中数据一致，则需要在慢速数据（数据库）中对应
	的数据发生变化的时候，清除缓存中相应的数据。
	缓存是改进网站性能的第一个手段，就像索引是改进数据库性能的第一个手段一样。
	ASP.net缓存主要分为：页面缓存(中庸)、数据源缓存(最不灵活的)、数据缓存(灵活)这三种主要类型。
	页面缓存
	给页面添加<%@ OutputCache Duration=“15”  VaryByParam=“none”%>标签，就可以启用页面缓存，这样页面内容就被缓存
				Duration表示缓存时间，以秒为单位
	这个缓存是在服务器缓存的，不是在客户端。一般只有看帖、看新闻、看视频的页面才缓存
	如果想让任何不同的查询字符串都创建不同的缓存，则设置VaryByParam="*"，一般情况下设置“*”就足够。
	数据源缓存
	在数据源控件中添加属性：EnableCaching="true" CacheDuration="20"
	数据源缓存相当于将数据缓存到内存中，在缓存期间不是直接访问的数据库
	数据变化频繁的话，就不适合使用
	缓存依赖
	文件依赖 //当a.txt文本文件发生变化或文件路径发生变化时，导致缓存失效
             Cache.Insert("lis", list, new CacheDependency(this.Request.MapPath("a.txt")));
	数据源依赖 (需要在web.config里面进行配置)
			SqlCacheDependency sqlDepend = new SqlCacheDependency("数据库缓存", "AreaFull");
             Cache.Insert("list",list,sqlDepend);
	 绝对过期时间
				Cache.Insert("list",list,null,DateTime.Now.AddSeconds(10),TimeSpan.Zero);
	缓存使用场景：访问量大，变化比较少   典型场景：京东菜单项变化比较少，访问又特别大
58. 线程外session
	Session丢失情况：
	1、存放 Session的电脑重启
	2、InProc 模式：aspnet_wp.exe 或 w3wp.exe 在“任务管理器”中或其它情况下导致其进程被终止运行。
	3、InProc 模式：修改.cs 文件后，编译了两次（只编译一次，有时不会丢失）
	4、InProc 模式：修改了Web.config
	5、InProc 模式，Windows 2003 环境：应用程序池回收、停止后重启
	6、InProc 模式：服务器上 bin 目录里的 .dll 文件被更新
60. 微软Ajax
	一个页面只能有一个ScriptManager，UpdatePanel可以有多个
	UpdatePanel必须放在ScriptManager之后
61. HttpApplication:负责整个管道生命周期，19个可以注册的事件
62. 错误页
	当页面发生错误的时候，ASP.Net会将错误信息展示出来（Sqlconnection的错误就能暴露连接字符串），这样一来不好看，二来会泄露网站的内部实现信息，给网站带来安全隐患，因此需要定制错误页，发生错误时显示开发人员定制的页面。404页面放点广告也是好的嘛。
	配置web.config，配置customErrors区域：
	 <customErrors mode="On" defaultRedirect="MyErrorPage.aspx">
				<error statusCode="403" redirect="NoAccess.htm" />
				<error statusCode="404" redirect="FileNotFound.htm" />
			</customErrors>
	mode三个可选值：On：总是显示定制错误页面；Off：不显示定制错误界面，直接显示调用堆栈等异常信息；remoteonly：对于本机的访问显示调用堆栈等异常信息，对于外部用户的显示定制错误页面。一般设置为RemoteOnly，这样发生错误的话，管理员可以在服务器的浏览器中看详细错误信息，普通用户看不到。学习演示的时候mode设置为On，否则看不到定制页。
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
														网上图书商城项目
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. 在js中对lable进行赋值，应该用innerHTML;刚开始用value→错误;
2. 在一般处理程序中对session进行操作应实现IRequiresSessionState接口
3. 如何在js中获取label的值？var labelValue=document.getElementById('label').innerHTML;
4. 验证码的作用：防机器人
5. 创建部分类：public partial class UserName{}
6. 出中文最好进行转码： Response.Redirect("/ShowMsg.aspx?msg="+Server.UrlEncode(msg));//msg中可能包含中文
7. 如何在前台的span标签中赋后台的值： 前台:<span><%name%></span>
									  后台:public string name="这个字段在前台显示";
8. 获取span中的值： var time=document.getElementById('timeSpan').innerHTML;
9. parseInt('要转换字符串')从第一个字母开始转，直到遇到第一个不是数字的字符为止，如果第一个字符就不是数字，返回一个NaN
10. HyperLink1控件  HyperLink1的NavigateUrl返回给浏览器端的最终属性时href
11. DateTime-DateTime是TimeSpan类型
12. 固定卡西尼服务器的端口号：在web右键属相→选择web→将“自动分配端口”改为“特定端口”
13. 对注册的用户为什么要激活?
	首先可以验证输入的邮箱是否正确，这样注册人多了收集的邮箱就多了，可以进行发广告;然后可以加个限制，对用户的一些权限加些限制
14. 用户找回密码操作
	用户输入“用户名(LoginId)”和“注册时输入的邮箱”，根据用户名查询出model实体，如果查询的model实体为null，证明该输入的用户不存在;如果查询的model实体不为null，从model实体中取出注册输入的邮箱，如果输入的邮箱与model实体里面的注册邮箱不一致，说明输入邮箱错误;如果输入的邮箱和model实体里面的邮箱一致;将model实体里面的LoginId和LoginPwd通过邮件发送到注册邮箱中

15. 修改网站配置项出现的问题
	修改网站配置项(Web.config)的时候,会造成网站的重启，用户的状态(session就会丢了)
16. 对于可能改动的数据，放在配置页面中进行修改
17. 在类库中的bll层中创建缓存
	首先、在类库bll层添加引用“System.Web”，其次、应用   public string GetModel(string name)
														{
															if (HttpRuntime.Cache["Setting_" + name] == null)
															{
																string value = dal.GetModel(name).Value;
																HttpRuntime.Cache["Setting_" + name] = value;
																return value;
															}
															else
															{
																return HttpRuntime.Cache["Setting_" + name].ToString();

																//HttpRuntime.Cache.Remove("Setting_"+name);//清空缓存.
															}
														}
18. 图像截取时，如何获得截取的位置坐标？
	document.getElementById(‘截取div的ID’).offset().top;
19. QueryString与Form关系平行，Params包括QueryString和Form，Request包括Params
	Request>Params>QueryString=Form
20. 对一个方法进行测试？
	可以在方法名上右击→单元测试
	执行单元测试方案→点击“调试当前上下文中的测试”
21. 用户控件ascx的应用
	可以把一些常用的元素(比如登录窗体元素)，在其他页面用到的话就可以放到用户控件里面，如果他页面用到的话，就可以在其他页面直接拖过去；
	这样可以避免重复性的设计，如果对从用户控件页面拖过来的元素进行修改，必须切换到用户控件页面进行修改
	用户控件页面(ascx)与模板页(Master)相似，不能单独进行访问;模板页偏重于布局，
22. aspx页、模板页、用户控件Load的执行顺序？
	首先aspx页的Load,其次模板页的Load，最后是用户控件的Load
23. 为什么用户登录的时候会在刚开始输入的时候没有验证码，后来又有了？
	因为出于用户体验角度考虑，刚开始输入的时候不让用户输入一大串开不太清的验证码，可是一旦用户输入的用户名与密码不对，这时可能就是一个非法的用户，验证码就出来了。(对于大多数用户第一次还是能够正确的输入用户名与密码的)
24. 对存储cookie密码进行加密算法进行加密，如何对登录时获得加密算法的cookie加密算法密码？
	对于记住我功能，创建两个cookie文件，一个cookie文件用于存储用户名，一个cookie文件存储密码，对用户名cookie文件不进行加密，对密码cookie文件进行加密算法进行加密;在登录时，首先判断用户名cookie文件与密码cookie文件是否为空，如果不为空，首先将用户名cookie文件与密码cookie文件的值读取出来，因为用户名cookie文件未加密，根据读取的用户名的值，查询出一个关于user的model实体，根据model实体读取出“密码”值(数据库中存储的密码)，将数据库中的密码采取相应的加密算法，进行加密;判断数据库中存储的密码经加密算法之后是否与密码cookie文件中读取的值一至
	加密算法中用到了随机数，算法:S+md5(S+md5(p));S为两个随机字母，P为密码。密码cookie文件中的前两个值就是随机数，可以获取cookie密码用
	到的随机数，这样就可以将数据库中的密码与密码cookie文件中用到的随机字母进行算法加密了
25. 图书列表绑定时，显示的简绍信息太多，解决办法？
	可以在页面的后台写一个关于截取的方法，在前台进行调用
26. 在进行求总页数时用到函数Math.Ceiling()近一位取整;就是Math.Ceiling(3.2)=4; 
27. 在绑定图书列表时，用到了viewstate，页面级交互，可以在点击“上一页”或“下一页”时，进行排序后的分页
28. 页码条丢失问题？日期排序按钮采用服务器控件按钮
	在点击【日期排序】按钮时，导致页面回发，首先执行页面的Page_Load方法由于添加了if(!IsPostBack)所以BindRepeater()方法不执行，在执行模板页的Page_Load方法，在执行用户控件的Page_Load方法，就不能完成给用户控件属性进行赋值
29. 为什么要进行url重写？
	首先:有利于SEO的优化，带参数的URL由于内容可能是动态改变的因此带参数的URL权重较低(权重在搜索引擎看来是重要的还是不重要的)
	其次:地址栏看起来更正规
30.  Remoting和webservice的区别：Remoting效率高，走的是普通TCP协议，WebService则是Http协议，需要IIS、ASP.Net、xml解析等，效率低，Remoting适合于内网通讯，WebService适合于外网通讯。
31，.net Remoting、WebService和WCF的区别联系：
Remoting：采用微软私有协议，效率高，只适合于系统内部通信，只限于.net程序通讯。
WebService：公有协议，效率低，适合于两个系统之间的通信，可以跨语言跨平台。
WCF：用来统一.net Remoting、WebService、管道、MSMQ等不同通讯协议开发技术的，底层仍然采用.net Remoting、WebService等协议，而不是取代.net Remoting、WebService的。
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  
  
  
	